using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

class Car
{
    public string Owner { get; set; }
    public string Model { get; set; }
    public string Manufacturer { get; set; }
    public int Year { get; set; }
    public string Color { get; set; }

    public override string ToString()
    {
        return $"{Owner}; {Model}; {Manufacturer}; {Year}; {Color}";
    }

    public static Car FromCsv(string csvLine)
    {
        var values = csvLine.Split(';');
        return new Car
        {
            Owner = values[0].Trim(),
            Model = values[1].Trim(),
            Manufacturer = values[2].Trim(),
            Year = int.Parse(values[3].Trim()),
            Color = values[4].Trim()
        };
    }

    public string ToCsv()
    {
        return $"{Owner}; {Model}; {Manufacturer}; {Year}; {Color}";
    }
}

class CarDatabase
{
    private List<Car> cars = new List<Car>();
    private string filePath;

    public CarDatabase(string filePath)
    {
        this.filePath = filePath;
        LoadData();
    }

    private void LoadData()
    {
        if (File.Exists(filePath))
        {
            var lines = File.ReadAllLines(filePath);
            cars = lines.Select(Car.FromCsv).ToList();
        }
    }

    private void SaveData()
    {
        var lines = cars.Select(car => car.ToCsv()).ToArray();
        File.WriteAllLines(filePath, lines);
    }

    public void DisplayDatabase()
    {
        foreach (var car in cars)
        {
            Console.WriteLine(car);
        }
    }

    public void SearchByOwner(string owner)
    {
        var car = cars.FirstOrDefault(c => c.Owner.Equals(owner, StringComparison.OrdinalIgnoreCase));
        Console.WriteLine(car != null ? car.ToString() : "Owner not found.");
    }

    public void FilterByColor(string color)
    {
        var filteredCars = cars.Where(c => c.Color.Equals(color, StringComparison.OrdinalIgnoreCase));
        foreach (var car in filteredCars)
        {
            Console.WriteLine(car);
        }
    }

    public void FilterByManufacturer(string manufacturer)
    {
        var filteredCars = cars.Where(c => c.Manufacturer.Equals(manufacturer, StringComparison.OrdinalIgnoreCase));
        foreach (var car in filteredCars)
        {
            Console.WriteLine(car);
        }
    }

    public void FilterByAge(int maxAge)
    {
        int currentYear = DateTime.Now.Year;
        var filteredCars = cars.Where(c => currentYear - c.Year <= maxAge);
        foreach (var car in filteredCars)
        {
            Console.WriteLine(car);
        }
    }

    public void CalculateStatistics()
    {
        if (cars.Count == 0)
        {
            Console.WriteLine("No cars in database.");
            return;
        }

        var favoriteModel = cars.GroupBy(c => c.Model).OrderByDescending(g => g.Count()).First().Key;
        var averageAge = cars.Average(c => DateTime.Now.Year - c.Year);
        var favoriteColor = cars.GroupBy(c => c.Color).OrderByDescending(g => g.Count()).First().Key;

        Console.WriteLine($"Most favorite model: {favoriteModel}");
        Console.WriteLine($"Average age: {averageAge:F1} years");
        Console.WriteLine($"Most favorite color: {favoriteColor}");
    }

    public void AddCar(Car car)
    {
        cars.Add(car);
        SaveData();
    }

    public void DeleteCar(string owner)
    {
        var car = cars.FirstOrDefault(c => c.Owner.Equals(owner, StringComparison.OrdinalIgnoreCase));
        if (car != null)
        {
            cars.Remove(car);
            SaveData();
        }
        else
        {
            Console.WriteLine("Owner not found.");
        }
    }
}

class Program
{
    static void Main()
    {
        Console.WriteLine("Enter the file path:");
        var filePath = Console.ReadLine();
        var db = new CarDatabase(filePath);

        while (true)
        {
            Console.WriteLine("Choose an option:");
            Console.WriteLine("1. Display the whole database");
            Console.WriteLine("2. Search for a person");
            Console.WriteLine("3. Filter cars by parameters");
            Console.WriteLine("4. Filter cars by age");
            Console.WriteLine("5. Calculate statistics");
            Console.WriteLine("6. Add a car");
            Console.WriteLine("7. Delete a car");
            Console.WriteLine("0. Exit");

            var choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    db.DisplayDatabase();
                    break;
                case "2":
                    Console.WriteLine("Enter owner name:");
                    var owner = Console.ReadLine();
                    db.SearchByOwner(owner);
                    break;
                case "3":
                    Console.WriteLine("Filter by:");
                    Console.WriteLine("1. Color");
                    Console.WriteLine("2. Manufacturer");
                    var filterChoice = Console.ReadLine();
                    if (filterChoice == "1")
                    {
                        Console.WriteLine("Enter color:");
                        var color = Console.ReadLine();
                        db.FilterByColor(color);
                    }
                    else if (filterChoice == "2")
                    {
                        Console.WriteLine("Enter manufacturer:");
                        var manufacturer = Console.ReadLine();
                        db.FilterByManufacturer(manufacturer);
                    }
                    break;
                case "4":
                    Console.WriteLine("Enter maximum age of cars:");
                    var maxAge = int.Parse(Console.ReadLine());
                    db.FilterByAge(maxAge);
                    break;
                case "5":
                    db.CalculateStatistics();
                    break;
                case "6":
                    Console.WriteLine("Enter car details (Owner; Model; Manufacturer; Year; Color):");
                    var carDetails = Console.ReadLine().Split(';');
                    var newCar = new Car
                    {
                        Owner = carDetails[0].Trim(),
                        Model = carDetails[1].Trim(),
                        Manufacturer = carDetails[2].Trim(),
                        Year = int.Parse(carDetails[3].Trim()),
                        Color = carDetails[4].Trim()
                    };
                    db.AddCar(newCar);
                    break;
                case "7":
                    Console.WriteLine("Enter owner name:");
                    var ownerToDelete = Console.ReadLine();
                    db.DeleteCar(ownerToDelete);
                    break;
                case "0":
                    return;
            }
        }
    }
}
