using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;

class Car
{
    public string Make { get; set; }
    public string Model { get; set; }
    public int Year { get; set; }
    public string Color { get; set; }
}

class Program
{
    static string filePath = @"C:\Users\Hostilian\OneDrive\Documents\GitHub\SimpleCarShorter\data.csv\all-vehicles-model.csv";
    static List<Car> cars = new List<Car>();

    static void Main()
    {
        LoadData();
        while (true)
        {
            Console.WriteLine("1. Display All Cars\n2. Filter by Age\n3. Filter by Color\n4. Exit");
            switch (Console.ReadLine())
            {
                case "1": DisplayAllCars(); break;
                case "2": FilterByAge(); break;
                case "3": FilterByColor(); break;
                case "4": return;
                default: Console.WriteLine("Invalid option."); break;
            }
        }
    }

    static void LoadData()
    {
        try
        {
            var lines = File.ReadAllLines(filePath).Skip(1);
            foreach (var line in lines)
            {
                var data = line.Split(';');
                cars.Add(new Car
                {
                    Make = data[0],
                    Model = data[1],
                    Year = int.Parse(data[63]), // Assuming Year is at index 63
                    Color = data[4]
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    static void DisplayAllCars()
    {
        foreach (var car in cars)
        {
            Console.WriteLine($"{car.Make} {car.Model} {car.Year} {car.Color}");
        }
    }

    static void FilterByAge()
    {
        Console.Write("Enter maximum age of cars: ");
        if (int.TryParse(Console.ReadLine(), out int maxAge))
        {
            var currentYear = DateTime.Now.Year;
            var filteredCars = cars.Where(car => currentYear - car.Year <= maxAge);
            foreach (var car in filteredCars)
            {
                Console.WriteLine($"{car.Make} {car.Model} {car.Year} {car.Color}");
            }
        }
    }

    static void FilterByColor()
    {
        Console.Write("Enter color: ");
        var color = Console.ReadLine().ToLower();
        var filteredCars = cars.Where(car => car.Color.ToLower() == color);
        foreach (var car in filteredCars)
        {
            Console.WriteLine($"{car.Make} {car.Model} {car.Year} {car.Color}");
        }
    }
}